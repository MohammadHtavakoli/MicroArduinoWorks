#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Keypad.h>
#include <TM1637Display.h>
#include <RTClib.h>
#include <DHT.h>

// تنظیمات سخت‌افزاری
#define SCREEN_WIDTH 128       // عرض صفحه‌نمایش OLED
#define SCREEN_HEIGHT 64       // ارتفاع صفحه‌نمایش OLED
#define OLED_RESET -1          // پایه Reset برای OLED (در این مدل استفاده نمی‌شود)
#define CLKPIN 52              // پایه ساعت برای نمایشگر TM1637
#define DATAPIN 3              // پایه داده برای نمایشگر TM1637
#define DHTPIN 2               // پایه سنسور DHT
#define DHTTYPE DHT22          // نوع سنسور DHT (DHT22)

// تعریف آبجکت‌های سخت‌افزاری
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // صفحه‌نمایش OLED
TM1637Display tm(CLKPIN, DATAPIN);  // نمایشگر TM1637
RTC_DS1307 rtc;                     // ماژول ساعت RTC
DHT dht(DHTPIN, DHTTYPE);           // سنسور دما و رطوبت DHT

// تنظیمات کی‌پد
const byte ROWS = 4;  // تعداد سطرهای کی‌پد
const byte COLS = 4;  // تعداد ستون‌های کی‌پد
char keys[ROWS][COLS] = {  // تعریف کلیدهای کی‌پد
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {22, 23, 24, 25}; // پایه‌های سطرهای کی‌پد
byte colPins[COLS] = {26, 27, 28, 29}; // پایه‌های ستون‌های کی‌پد
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS); // تعریف آبجکت کی‌پد

// متغیرهای قفل دستگاه
String password = "1234";      // رمز عبور پیش‌فرض
String inputPassword = "";     // رشته‌ای برای ذخیره رمز عبور وارد شده
bool isUnlocked = false;       // وضعیت قفل دستگاه
int currentMenu = 0;           // شماره منوی فعلی

// متغیرهای ماشین حساب
String calcInput = "";         // ورودی ماشین حساب
double result = 0;             // نتیجه محاسبات
char lastOperator = '\0';      // آخرین عملگر استفاده شده در محاسبات

// تعریف نقطه برای بازی
struct Point {  
  int x;                       // مختصات افقی
  int y;                       // مختصات عمودی
};

// تنظیمات و متغیرهای بازی مار
#define SNAKE_MAX_LENGTH 50    // حداکثر طول مار
#define SNAKE_PIECE_SIZE 2     // اندازه هر بخش از مار
#define STARTING_SNAKE_SIZE 3  // طول اولیه مار
#define SNAKE_MOVE_DELAY 200   // تاخیر در حرکت مار (بر حسب میلی‌ثانیه)
enum Direction { UP, RIGHT, DOWN, LEFT }; // جهت‌های ممکن برای حرکت مار
enum GameState { START, RUNNING, GAMEOVER }; // وضعیت‌های بازی

Point snake[SNAKE_MAX_LENGTH]; // آرایه‌ای برای ذخیره مختصات مار
int snakeLength;               // طول فعلی مار
Point fruit;                   // مختصات میوه
Direction dir, newDir;         // جهت فعلی و جهت جدید مار
GameState gameState = START;           // وضعیت فعلی بازی

unsigned long lastMoveTime = 0; // زمان آخرین حرکت مار
int moveInterval = 300;         // بازه زمانی بین حرکات مار

// متغیرهای کرنومتر
unsigned long stopwatchStartTime = 0; // زمان شروع کرنومتر
unsigned long stopwatchElapsedTime = 0; // مدت زمان سپری‌شده
bool stopwatchRunning = false;         // وضعیت روشن یا خاموش بودن کرنومتر


// my logo
const unsigned char logo_bitmap [] PROGMEM = {
	// 'Logo_128x64', 128x64px
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x20, 0x09, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x8a, 0xa2, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfd, 0x02, 0x94, 0x20, 0x08, 0xa2, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xd0, 0x90, 0x23, 0x5f, 0xf6, 0x48, 0xa4, 0x4b, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfd, 0x04, 0x4b, 0xff, 0xff, 0xff, 0xff, 0x11, 0x00, 0xbf, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe8, 0x51, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x54, 0x4f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x42, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0x11, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfd, 0x11, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x84, 0x5f, 0xff, 0xff, 
	0xff, 0xff, 0xe8, 0x4a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa1, 0x2f, 0xff, 0xff, 
	0xff, 0xfb, 0xa2, 0x17, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x05, 0xee, 0xee, 
	0xee, 0xef, 0x48, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0xee, 0xff, 0xf7, 0xff, 0xfa, 0xa2, 0xff, 0xff, 
	0xff, 0xfe, 0x02, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xf7, 0x7f, 0xff, 0xff, 0x11, 0x7f, 0xff, 
	0xff, 0xf8, 0xab, 0xff, 0xff, 0xef, 0xef, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xc8, 0x1f, 0xff, 
	0xff, 0xe2, 0x0f, 0xd5, 0x49, 0x3f, 0xff, 0xf2, 0x49, 0x2b, 0xff, 0xfe, 0xff, 0xf2, 0x8f, 0xff, 
	0xff, 0xa8, 0xbf, 0x80, 0x10, 0x9f, 0xff, 0x61, 0x10, 0x81, 0xff, 0xff, 0xff, 0xf8, 0x53, 0xff, 
	0xfb, 0x84, 0x7f, 0x95, 0x44, 0x1f, 0x7f, 0xc8, 0x44, 0x27, 0xfe, 0xff, 0xff, 0xfe, 0x05, 0xdd, 
	0xdf, 0x21, 0xff, 0x00, 0x12, 0x8f, 0xff, 0x92, 0x92, 0x93, 0xff, 0xff, 0xf7, 0xff, 0xa0, 0xff, 
	0xfe, 0x15, 0xff, 0x55, 0x40, 0x5f, 0xfb, 0x44, 0x08, 0x07, 0xff, 0xf7, 0xff, 0xbf, 0x94, 0x7f, 
	0xfc, 0xa7, 0xfe, 0x00, 0x2a, 0x0f, 0xff, 0x11, 0x42, 0xaf, 0xf7, 0xff, 0xff, 0xff, 0xc2, 0xbf, 
	0xf8, 0x0f, 0xfb, 0x55, 0x01, 0x5f, 0xfe, 0x44, 0x28, 0x07, 0xff, 0xff, 0xbf, 0xff, 0xf0, 0x1f, 
	0xf2, 0xaf, 0xfe, 0x00, 0xaa, 0x0f, 0xdc, 0x11, 0x02, 0xaf, 0xff, 0xbf, 0xff, 0xff, 0xfa, 0x9f, 
	0x60, 0x3f, 0xfe, 0xaa, 0x00, 0xa7, 0xf9, 0x44, 0xa8, 0x1f, 0xff, 0xff, 0xff, 0xfb, 0xf8, 0x47, 
	0xea, 0xbf, 0xdc, 0x01, 0x54, 0x0f, 0xf0, 0x12, 0x02, 0x9f, 0xff, 0xfd, 0xff, 0xff, 0xfd, 0x17, 
	0xc0, 0x7f, 0xfd, 0x54, 0x02, 0xa7, 0xe5, 0x40, 0xa8, 0x5f, 0xbd, 0xff, 0xff, 0xff, 0xfe, 0x47, 
	0xd5, 0x7f, 0xfc, 0x02, 0xa8, 0x4f, 0x60, 0x14, 0x02, 0x1f, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x13, 
	0x80, 0xfe, 0xf9, 0x50, 0x45, 0x07, 0xca, 0xa2, 0xa9, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0x49, 
	0xaa, 0xff, 0xf8, 0x0a, 0xc0, 0xa7, 0x00, 0x08, 0x04, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x81, 0xff, 0xf5, 0x40, 0xd4, 0x13, 0x55, 0x5a, 0xa1, 0x77, 0x55, 0x55, 0x55, 0x55, 0x55, 0x6d, 
	0x29, 0xff, 0xf0, 0x2a, 0xc2, 0x86, 0x00, 0x30, 0x14, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x05, 0xff, 0xf5, 0x41, 0xe8, 0x51, 0x55, 0x35, 0x42, 0x70, 0x92, 0xaa, 0x92, 0x52, 0x4a, 0xa4, 
	0xa1, 0xff, 0xb0, 0x15, 0xc2, 0x08, 0x00, 0xf0, 0x28, 0xf4, 0x20, 0x00, 0x08, 0x84, 0x20, 0x08, 
	0x15, 0xff, 0xe5, 0x41, 0xe9, 0x45, 0x54, 0xea, 0x82, 0xf1, 0x0a, 0x92, 0x42, 0x11, 0x09, 0x22, 
	0x83, 0xff, 0xe0, 0x15, 0xe4, 0x20, 0x02, 0xe0, 0x50, 0xe0, 0xa0, 0x21, 0x10, 0x40, 0x40, 0x40, 
	0x51, 0xfd, 0xea, 0x83, 0xe1, 0x15, 0x53, 0xea, 0x0a, 0xf6, 0x96, 0x88, 0x45, 0x2a, 0x95, 0x15, 
	0x0b, 0xf7, 0xc0, 0x57, 0xf4, 0x80, 0x0b, 0xc1, 0x41, 0xff, 0xff, 0x05, 0x13, 0xff, 0xff, 0x80, 
	0xa1, 0xff, 0xca, 0x03, 0xe0, 0x55, 0x47, 0xe8, 0x2b, 0xff, 0xff, 0x50, 0x47, 0xff, 0xff, 0xa5, 
	0x89, 0xff, 0xa1, 0x57, 0xf5, 0x00, 0x2f, 0xc5, 0x43, 0xff, 0xfe, 0x02, 0x13, 0xff, 0xff, 0x11, 
	0x90, 0xff, 0x88, 0x0f, 0xf0, 0x55, 0x5f, 0x90, 0x13, 0xff, 0xfe, 0x90, 0x87, 0xff, 0xff, 0x42, 
	0xc5, 0x7f, 0xa5, 0x4f, 0xf5, 0x00, 0x3f, 0xa5, 0x4b, 0xff, 0xfe, 0x0a, 0x2f, 0xff, 0xff, 0x0b, 
	0xc8, 0xfb, 0x10, 0x2f, 0xf0, 0x55, 0x7f, 0x80, 0x07, 0xff, 0xfc, 0x40, 0x8f, 0xff, 0xfe, 0x43, 
	0xc2, 0x7f, 0x85, 0x0f, 0xfa, 0x00, 0xbf, 0x2a, 0xa7, 0xff, 0xfc, 0x2a, 0x2f, 0xff, 0xfc, 0x17, 
	0xe8, 0x3f, 0x20, 0xaf, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xd9, 0x00, 0x8f, 0xff, 0xfd, 0x47, 
	0xf2, 0x9e, 0x94, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xaa, 0x3f, 0xff, 0xb8, 0x17, 
	0xf0, 0x2e, 0x22, 0xbf, 0xff, 0xff, 0xff, 0xfb, 0xbf, 0xff, 0xfa, 0x00, 0x1f, 0xff, 0xf2, 0x4f, 
	0xfd, 0x0e, 0x88, 0x3f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x92, 0xbf, 0xff, 0xe0, 0x3f, 
	0xfc, 0xa2, 0x22, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0xf4, 0x20, 0x3f, 0xfd, 0xd5, 0x3f, 
	0xfe, 0x08, 0x88, 0x3f, 0xff, 0xff, 0xff, 0xdf, 0xfd, 0xff, 0xf1, 0x0a, 0xbf, 0xff, 0x80, 0xff, 
	0xff, 0x44, 0x45, 0x7f, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x40, 0x7f, 0xff, 0x29, 0x7f, 
	0xdf, 0x92, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe5, 0x14, 0xff, 0xbc, 0x03, 0xff, 
	0xff, 0xe1, 0x15, 0x7f, 0xff, 0xff, 0xfe, 0xff, 0xef, 0xff, 0xc8, 0x40, 0xff, 0xf4, 0xa7, 0xff, 
	0xff, 0xf4, 0x80, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0x14, 0xff, 0xe8, 0x1f, 0xfe, 
	0xfb, 0xf8, 0x55, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x81, 0xf7, 0x82, 0xaf, 0xff, 
	0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0xfe, 0x84, 0x55, 0xfe, 0x50, 0x7f, 0xff, 
	0xff, 0xff, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa2, 0x01, 0xf9, 0x05, 0xff, 0xf7, 
	0xff, 0xbf, 0xd1, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x89, 0x53, 0xc4, 0x27, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xc0, 0xee, 0xee, 0xff, 0xfb, 0xff, 0xf7, 0xff, 0xff, 0x20, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xd2, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x12, 0x7f, 0xff, 0xbf, 
	0xfd, 0xff, 0xff, 0xc0, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x45, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfa, 0x08, 0x2f, 0xff, 0xdf, 0xff, 0xbf, 0xe8, 0x08, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0xa0, 0x80, 0xb7, 0xff, 0xff, 0xfa, 0x05, 0x42, 0xff, 0xff, 0xfd, 0xff, 
	0xef, 0xff, 0xdf, 0xff, 0xd4, 0x12, 0x00, 0x55, 0x50, 0x00, 0xa0, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x95, 0x00, 0x05, 0x4a, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x24, 0x90, 0x00, 0xb7, 0xff, 0xff, 0xff, 0xef, 0xff, 
	0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x91, 0x05, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'car ', 128x64px
const unsigned char car_bitmap [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 
	0xff, 0xff, 0xff, 0xff, 0x7e, 0xde, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xf9, 0xbf, 
	0xff, 0xff, 0xfb, 0xf9, 0xeb, 0xff, 0xcf, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xee, 0x7f, 
	0xff, 0xff, 0xed, 0xff, 0xbb, 0xff, 0xfb, 0xff, 0xff, 0xcf, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xdf, 
	0xfb, 0xde, 0xff, 0x66, 0xfe, 0xcf, 0xdf, 0xbf, 0xf8, 0x3e, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x3e, 0x6f, 0xff, 0xfb, 0xfe, 0xf7, 0xb4, 0xed, 0xf8, 0x1b, 0x3b, 0x7f, 0xdf, 0xdf, 0xff, 0xff, 
	0xcf, 0xfb, 0x6c, 0x9b, 0x6b, 0x35, 0xb7, 0x6d, 0xf1, 0xc6, 0x6d, 0xb2, 0x73, 0x77, 0xff, 0xff, 
	0xfe, 0xdb, 0xbf, 0xef, 0xfb, 0xdd, 0xdb, 0x77, 0x73, 0x80, 0x7d, 0xbf, 0xed, 0x3f, 0xff, 0xff, 
	0x3f, 0xec, 0xf7, 0xf4, 0xfe, 0xdb, 0x6d, 0x9b, 0x45, 0x87, 0xfe, 0xcd, 0xbf, 0xef, 0xff, 0xff, 
	0xdb, 0xf7, 0x99, 0xb7, 0xbd, 0xb6, 0xed, 0xee, 0xdc, 0x7f, 0xbe, 0xf6, 0xff, 0xff, 0xff, 0xff, 
	0xdf, 0x74, 0xee, 0xdb, 0xfb, 0x6d, 0xb6, 0xef, 0xb3, 0x50, 0xff, 0x37, 0xff, 0xff, 0xff, 0xff, 
	0x77, 0xdd, 0xbb, 0x6c, 0xde, 0xdb, 0x77, 0x39, 0xcd, 0xa6, 0x49, 0xef, 0xff, 0xff, 0xff, 0xff, 
	0x26, 0xc9, 0xbf, 0x77, 0xed, 0xff, 0xff, 0xff, 0xff, 0xbb, 0xfe, 0xdf, 0xff, 0xff, 0xff, 0xff, 
	0x69, 0x20, 0x24, 0xd2, 0x73, 0x31, 0xbf, 0xfe, 0xb2, 0x59, 0x25, 0x97, 0xff, 0xff, 0xff, 0xff, 
	0x5d, 0xb6, 0x40, 0x03, 0xd8, 0xe6, 0x0a, 0x00, 0x10, 0x04, 0x01, 0xfb, 0xff, 0xff, 0xda, 0xc9, 
	0x96, 0xdb, 0x13, 0x1f, 0x05, 0xe2, 0x0b, 0xd0, 0x40, 0x02, 0x9b, 0xff, 0xff, 0xd9, 0x7f, 0xff, 
	0xeb, 0x49, 0xc8, 0x78, 0xcc, 0xd8, 0x25, 0x93, 0x09, 0x08, 0xbf, 0xfd, 0xf6, 0x7f, 0xff, 0xff, 
	0x39, 0x76, 0x6f, 0xe6, 0x6b, 0x80, 0x12, 0xc6, 0xe0, 0x4c, 0x7f, 0xff, 0x5f, 0xff, 0xe3, 0xff, 
	0xc4, 0x96, 0xb7, 0x00, 0x01, 0x80, 0x48, 0xc0, 0x00, 0x03, 0x0f, 0xb7, 0xff, 0xff, 0xfe, 0xff, 
	0x16, 0x89, 0xb8, 0x00, 0x1b, 0x41, 0xbc, 0x70, 0x34, 0x00, 0x65, 0xff, 0xff, 0xbf, 0xff, 0x7f, 
	0x72, 0x6e, 0xfb, 0xb2, 0x37, 0x08, 0xe7, 0xb3, 0x8c, 0xbf, 0x41, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0x49, 0xb2, 0x7f, 0xff, 0xc7, 0x20, 0x0f, 0xdb, 0x03, 0xef, 0xff, 0x9f, 0xff, 0xf7, 0xff, 0xff, 
	0x4d, 0x39, 0x7f, 0xff, 0xff, 0xff, 0x26, 0xce, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x32, 0x4b, 0xff, 0xff, 0xfc, 0x7f, 0xfb, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 
	0x93, 0xd3, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2e, 0xfe, 
	0x58, 0x7e, 0x7f, 0x37, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0x85, 0xbb, 0xb7, 
	0x4f, 0x3e, 0x01, 0xdc, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xee, 0xff, 0xfd, 
	0xff, 0xff, 0xf0, 0x4e, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x33, 0xff, 0xef, 0x6d, 0xdf, 
	0xff, 0xe4, 0xde, 0x07, 0x50, 0x00, 0x27, 0xff, 0xdb, 0xff, 0xff, 0x3f, 0xf6, 0x64, 0x7f, 0x76, 
	0xfc, 0x92, 0x02, 0x63, 0xff, 0xff, 0x20, 0x01, 0xb0, 0xff, 0xff, 0xb9, 0x2d, 0x91, 0x9b, 0xff, 
	0x86, 0x1b, 0x06, 0xf1, 0x80, 0x03, 0xff, 0xfc, 0xc6, 0x79, 0xcf, 0x83, 0x40, 0x04, 0x3e, 0xdb, 
	0x3c, 0xc0, 0xc4, 0xf0, 0x80, 0x00, 0x00, 0x36, 0x83, 0x08, 0x00, 0x04, 0x13, 0xff, 0xef, 0xff, 
	0x0d, 0x0f, 0xf6, 0xb2, 0x48, 0x00, 0x02, 0x01, 0xb9, 0x8f, 0xfe, 0xd9, 0xbf, 0xff, 0xbb, 0x6d, 
	0x4e, 0x7f, 0x9a, 0x99, 0x08, 0x48, 0x00, 0x81, 0x38, 0x84, 0x6f, 0xff, 0xfd, 0xb6, 0xff, 0xff, 
	0x4b, 0xbd, 0x08, 0xd0, 0x6b, 0x01, 0x04, 0x31, 0x3c, 0x00, 0x00, 0x3f, 0xce, 0xef, 0xdd, 0xb7, 
	0x3c, 0xe7, 0xe6, 0x72, 0x03, 0xfe, 0xf3, 0x19, 0x2c, 0x24, 0x00, 0x73, 0xdb, 0x6e, 0xf7, 0xfd, 
	0xe7, 0xde, 0xf3, 0x00, 0x94, 0xd2, 0x9d, 0xcd, 0x24, 0x84, 0x00, 0xf7, 0x7b, 0x37, 0xbe, 0xdf, 
	0xbf, 0x7b, 0xdd, 0xc5, 0x3f, 0xfd, 0xd4, 0x31, 0x34, 0x07, 0xec, 0xcf, 0x1d, 0xfd, 0xef, 0xf6, 
	0xfb, 0xef, 0x7f, 0xff, 0xfb, 0x6f, 0x77, 0x04, 0x1c, 0x48, 0x6f, 0x38, 0x05, 0xdf, 0x7b, 0x7f, 
	0xde, 0xfd, 0xfb, 0xbe, 0xff, 0xfb, 0xff, 0xe1, 0xcc, 0x88, 0x53, 0xfe, 0xff, 0x77, 0xdf, 0xdb, 
	0x77, 0xb7, 0xbe, 0xf7, 0xdd, 0xbe, 0xdb, 0xfc, 0x61, 0x89, 0xde, 0xdf, 0xfb, 0xfd, 0xf6, 0xfe, 
	0x7d, 0xfe, 0xef, 0xdd, 0xf7, 0xef, 0xfe, 0xdf, 0x31, 0x0f, 0xff, 0xf7, 0x6e, 0xdf, 0x7f, 0xb7, 
	0xbf, 0x6f, 0xfb, 0x7f, 0x76, 0xfb, 0x6f, 0xff, 0xfa, 0x77, 0xb7, 0x7d, 0xff, 0xf7, 0xdb, 0xfd, 
	0x9b, 0xfb, 0x7f, 0xef, 0xdf, 0x9f, 0xfb, 0x6d, 0xff, 0xfe, 0xfd, 0xdf, 0xb7, 0x7d, 0xfe, 0xdf, 
	0x67, 0xbf, 0xdd, 0xbb, 0xf9, 0xf6, 0xdf, 0xfe, 0xfd, 0xdb, 0xdf, 0xf6, 0xfd, 0xdf, 0x6f, 0xf7, 
	0x6c, 0xed, 0xf7, 0xfe, 0xef, 0x7f, 0xf6, 0xdb, 0xff, 0x7f, 0x76, 0xff, 0xdf, 0xf7, 0xfb, 0x7d
};

// 'rose', 128x64px
const unsigned char rose_bitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfe, 0x7f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf7, 0xe7, 0xc3, 0xef, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x6f, 0xfc, 0x3f, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x8f, 0xff, 0xff, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xe7, 0xff, 0xff, 0xe7, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xf3, 0xc6, 0x6b, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x7c, 0x3e, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0x7f, 0xfe, 0xbe, 0x7b, 0x7f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfd, 0xfe, 0x7f, 0xbf, 0xfd, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf6, 0xff, 0xff, 0x6f, 0xfd, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf2, 0xff, 0xef, 0xff, 0xff, 0xf7, 0xfd, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xed, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xfe, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xef, 0xfe, 0x4f, 0xff, 0xef, 0xf0, 0xff, 0x7b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0x83, 0xf1, 0x9f, 0xc1, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0xdf, 0xf7, 0xef, 0xfb, 0xff, 0xbb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xef, 0xf7, 0xfe, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xef, 0xf7, 0xfb, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xcf, 0xf3, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0x5f, 0xf7, 0xef, 0xfe, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xfb, 0xdf, 0xf7, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xbf, 0xfe, 0x7f, 0xfd, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xaf, 0xff, 0xff, 0xfd, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xdf, 0xff, 0xff, 0xfb, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x3f, 0xfd, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xf0, 0x3f, 0xfc, 0x6f, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xfc, 0x7f, 0xfc, 0x3f, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xfc, 0xbe, 0x7d, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfb, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x77, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x79, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x7f, 0xfe, 0x7f, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xbf, 0xfe, 0x7f, 0xfb, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xdf, 0xfe, 0x7f, 0xf7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xef, 0xfc, 0x3f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x73, 0xfc, 0x3f, 0xdf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf0, 0x1f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x0f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x90, 0x0b, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0x1e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 'cat', 128x64px
const unsigned char cat_bitmap [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x7f, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7f, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0xff, 0xfc, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1f, 0xc0, 0x06, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01, 0xee, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0xff, 0x81, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x3c, 0xff, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x3e, 0xf3, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xc0, 0x03, 0x1f, 0xc6, 0x70, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0xc7, 0x8f, 0x9f, 0x98, 0x3f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0x00, 0x3b, 0xf7, 0x80, 0xd8, 0x3e, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x09, 0xff, 0x80, 0xc8, 0x3c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0x80, 0x48, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x58, 0x31, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x93, 0xf1, 0x98, 0x39, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x08, 0x1f, 0xff, 0x70, 0x1f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x20, 0x07, 0xc6, 0x0f, 0xf9, 0xe0, 0x7f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x01, 0xf3, 0x87, 0xff, 0xf8, 0xff, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x70, 0x57, 0xff, 0xf7, 0xff, 0x9e, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x30, 0x30, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x30, 0x3f, 0x18, 0x03, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x30, 0x3f, 0xff, 0x00, 0xff, 0xfe, 0xff, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x30, 0x3f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x20, 0x0f, 0x00, 0x70, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x60, 0x0c, 0x02, 0x00, 0x3f, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x40, 0x08, 0x03, 0x00, 0x0e, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xf0, 0x00, 0x20, 0x71, 0x01, 0x30, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xfe, 0x00, 0x80, 0xf1, 0x83, 0x7c, 0x80, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0x93, 0xff, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xf0, 0x00, 0x00, 0x52, 0x01, 0x9f, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xf8, 0x00, 0x00, 0x02, 0x00, 0x13, 0xe1, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x27, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x09, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(9600);

  // مقداردهی اولیه نمایشگر OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED init failed!");
    while (true);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("System Initializing...");
  
  display.display();
  showLogo();

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("System Ready!");
  display.display();
  delay(1000);

  // مقداردهی اولیه ماژول‌ها
  tm.setBrightness(0x0a);  // Set brightness (0x00 to 0x0f)
  rtc.begin();
  dht.begin();


  delay(2000);
}


void loop() {
  if (!isUnlocked) {
    lockScreen();  // صفحه قفل
  } else {
    switch (currentMenu) {
      case 0: showMenu(); break;       // نمایش منو
      case 1: showDistance(); break;  // فاصله‌سنج
      case 2: showTempHumidity(); break; // دما و رطوبت
      case 3: showTime(); break;      // ساعت
      case 4: showSnakeGame(); break;    // بازی
      case 5: showGallery(); break;   // گالری
      case 6: showCalculator(); break; // ماشین حساب
      case 7: showStopwatch(); break; // کرنومتر
    }
  }
}


// قفل صفحه
void lockScreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Enter Password:");
  display.print(inputPassword);
  display.display();

  char key = keypad.getKey();
  if (key) {
    if (key == '#') {
      if (inputPassword == password) {
        isUnlocked = true;
        currentMenu = 0;
      } else {
        inputPassword = "";
        display.clearDisplay();
        display.println("Wrong Password!");
        display.display();
        delay(1000);
      }
    } else {
      inputPassword += key;
    }
  }
}

// نمایش منو
void showMenu() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Menu:");
  display.println("1. Distance");
  display.println("2. Temp & Humidity");
  display.println("3. Time");
  display.println("4. Snake Game");
  display.println("5. Gallery");
  display.println("6. Calculator");
  display.println("7. Stopwatch");
  display.display();

  char key = keypad.getKey();
  if (key) {
    switch (key) {
      case '1': currentMenu = 1; break;
      case '2': currentMenu = 2; break;
      case '3': currentMenu = 3; break;
      case '4': currentMenu = 4; break;
      case '5': currentMenu = 5; break;
      case '6': currentMenu = 6; break;
      case '7': currentMenu = 7; break;
      case 'B': isUnlocked = false; inputPassword = ""; break;
    }
  }
}


// اندازه‌گیری فاصله
void showDistance() {
  long duration;
  int distance;

  pinMode(4, OUTPUT);  // Trigger pin
  pinMode(5, INPUT);   // Echo pin

  digitalWrite(4, LOW);
  delayMicroseconds(2);
  digitalWrite(4, HIGH);
  delayMicroseconds(10);
  digitalWrite(4, LOW);

  duration = pulseIn(5, HIGH);
  distance = duration * 0.034 / 2;

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Distance:");
  display.print(distance);
  display.println(" cm");
  display.display();
  char key = keypad.getKey();
  if (key == 'B') {
    currentMenu = 0; // بازگشت به منو
    return;
  }
  delay(1000);
}

// نمایش دما و رطوبت
void showTempHumidity() {
  
  float temp = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (isnan(temp) || isnan(humidity)) {
    display.clearDisplay();
    display.println("Sensor Error!");
    display.display();
    return;
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Temperature:");
  display.print(temp);
  display.println(" C");
  display.println("Humidity:");
  display.print(humidity);
  display.println(" %");
  display.display();
  char key = keypad.getKey();
  if (key == 'B') {
    currentMenu = 0; // بازگشت به منو
    return;
  }
  delay(1000);
}

// نمایش ساعت
void showTime() {
  DateTime now = rtc.now();

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Current Time:");
  display.print(now.hour());
  display.print(":");
  display.println(now.minute());
  display.display();

  // نمایش زمان روی TM1637
  int hours = now.hour();
  int minutes = now.minute();

  // فرمت ساعت و دقیقه به صورت دو رقمی
  int timeDisplay = (hours % 24) * 100 + minutes; // محدودیت ساعت به ۲۴ ساعت
  tm.showNumberDecEx(timeDisplay, 0b01000000, true); // نمایش به صورت HH:MM

  char key = keypad.getKey();
  if (key == 'B') {
    currentMenu = 0; // بازگشت به منو
    return;
  }
  delay(1000);
}

// گالری تصاویر
void showGallery() {
  while (true) {
    // نمایش منوی گالری
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("Gallery:");
    display.println("1. Car");
    display.println("2. Rose");
    display.println("3. Cat");
    display.display();

    // خواندن دکمه فشرده شده
    char key = keypad.getKey();
    if (key) {
      if (key == '1') {
        // نمایش تصویر ماشین
        display.clearDisplay();
        display.drawBitmap(0, 0, car_bitmap, 128, 64, SSD1306_WHITE);
        display.display();

        // منتظر بمان تا کاربر دکمه B را فشار دهد
        while (true) {
          key = keypad.getKey();
          if (key == 'B') {
            break; // برگشت به منوی گالری
          }
          delay(100); // تأخیر کوچک برای جلوگیری از خواندن سریع کی‌پد
        }
      } else if (key == '2') {
        // نمایش تصویر گل
        display.clearDisplay();
        display.drawBitmap(0, 0, rose_bitmap, 128, 64, SSD1306_WHITE);
        display.display();

        // منتظر بمان تا کاربر دکمه B را فشار دهد
        while (true) {
          key = keypad.getKey();
          if (key == 'B') {
            break; // برگشت به منوی گالری
          }
          delay(100); // تأخیر کوچک برای جلوگیری از خواندن سریع کی‌پد
        }
      } else if (key == '3') {
        // نمایش تصویر گربه
        display.clearDisplay();
        display.drawBitmap(0, 0, cat_bitmap, 128, 64, SSD1306_WHITE);
        display.display();

        // منتظر بمان تا کاربر دکمه B را فشار دهد
        while (true) {
          key = keypad.getKey();
          if (key == 'B') {
            break; // برگشت به منوی گالری
          }
          delay(100); // تأخیر کوچک برای جلوگیری از خواندن سریع کی‌پد
        }
      } else if (key == 'B') {
        // بازگشت به منوی اصلی
        currentMenu = 0;
        return;
      }
    }
    delay(10); // تأخیر کوچک برای جلوگیری از خواندن سریع کی‌پد
  }
}
// تابع برای نمایش لوگو در ابتدای کار
void showLogo(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width() - 128) / 2,
    (display.height() - 64) / 2, 
    logo_bitmap, 128, 64, 1);
  display.display();
  delay(2000);
}
// نمایش بازی ماری
void showSnakeGame() {
  // Initialize the game
  setupGame();
  unsigned long lastMoveTime = 0;

  while (true) {
    unsigned long currentTime = millis();
    char key = keypad.getKey(); // خواندن کلید فشار داده شده

    switch (gameState) {
      case START:
        display.clearDisplay();
        drawMap();
        drawScore();
        drawPressToStart();
        display.display();
        if (buttonPress()) {
          gameState = RUNNING;
          delay(200); // Debounce delay
        }
        break;

      case RUNNING:
        if (currentTime - lastMoveTime >= SNAKE_MOVE_DELAY) {
          dir = newDir; // Update the direction
          if (moveSnake()) {
            gameState = GAMEOVER; // Collision detected, game over
            break;
          }
          checkFruit();
          display.clearDisplay();
          drawMap();
          drawScore();
          display.display();
          lastMoveTime = currentTime;
        }
        readDirection(); // Read user input from keypad
        break;

      case GAMEOVER:
        display.clearDisplay();
        drawGameover();
        display.display();

        // اگر دکمه A فشار داده شد، بازی ریست شود
        if (key == 'A') {
          delay(500); // Debounce delay
          setupGame(); // Reset the game
          gameState = RUNNING; // Start the game again
        }
        // اگر دکمه B فشار داده شد، به منوی اصلی بازگرد
        else if (key == 'B') {
          delay(500); // Debounce delay
          currentMenu = 0;
          return; // Exit the game and return to the main menu
        }
        break;
    }

    delay(10); // General loop delay for responsiveness
  }
}
// تابع حرکت مار 
bool moveSnake() {
  // محاسبه موقعیت جدید سر مار
  int newX = snake[0].x;
  int newY = snake[0].y;

  switch (dir) {
    case UP:    newY--; break;
    case DOWN:  newY++; break;
    case LEFT:  newX--; break;
    case RIGHT: newX++; break;
  }

  // بررسی برخورد با دیوار یا خود مار
  if (collisionCheck(newX, newY)) {
    return true; // برخورد رخ داده است
  }

  // حرکت مار به موقعیت جدید
  for (int i = snakeLength - 1; i > 0; i--) {
    snake[i] = snake[i - 1]; // هر قطعه به موقعیت قطعه قبلی می‌رود
  }
  snake[0] = {newX, newY}; // سر مار به موقعیت جدید می‌رود

  return false; // هیچ برخوردی رخ نداده است
}
// تابع برای تنظیمات بازی 
void setupGame() {
  gameState = START;
  dir = RIGHT;
  newDir = RIGHT;
  resetSnake();
  generateFruit();
  display.clearDisplay();
  drawMap();
  drawScore();
  drawPressToStart();
  display.display();
}
// تابع برای ریستارت بازی
void resetSnake() {
  snakeLength = STARTING_SNAKE_SIZE;
  for (int i = 0; i < snakeLength; i++) {
    snake[i] = {SCREEN_WIDTH / 4 - i, SCREEN_HEIGHT / 4};
  }
}
// تابع برای چک کردن میوه
void checkFruit() {
  if (snake[0].x == fruit.x && snake[0].y == fruit.y) {
    if (snakeLength < SNAKE_MAX_LENGTH) snake[snakeLength++] = snake[snakeLength - 1];
    generateFruit();
  }
}
// تابع برای تولید میوه
void generateFruit() {
  bool valid;
  do {
    valid = true;
    fruit = {random(0, SCREEN_WIDTH / SNAKE_PIECE_SIZE), random(0, SCREEN_HEIGHT / SNAKE_PIECE_SIZE)};
    for (int i = 0; i < snakeLength; i++) {
      if (snake[i].x == fruit.x && snake[i].y == fruit.y) {
        valid = false;
        break;
      }
    }
  } while (!valid);
}
// چک کردن برخورد با دیوار یا  خود مار 
bool collisionCheck(int x, int y) {
  // بررسی برخورد با دیوار
  if (x < 0 || y < 0 || x >= SCREEN_WIDTH / SNAKE_PIECE_SIZE || y >= SCREEN_HEIGHT / SNAKE_PIECE_SIZE) {
    return true; // برخورد با دیوار
  }

  // بررسی برخورد با خود مار
  for (int i = 1; i < snakeLength; i++) {
    if (snake[i].x == x && snake[i].y == y) {
      return true; // برخورد با خود مار
    }
  }

  return false; // هیچ برخوردی رخ نداده است
}
// تابع برای مپ بازی 
void drawMap() {
  for (int i = 0; i < snakeLength; i++) {
    display.fillRect(snake[i].x * SNAKE_PIECE_SIZE, snake[i].y * SNAKE_PIECE_SIZE, SNAKE_PIECE_SIZE, SNAKE_PIECE_SIZE, SSD1306_WHITE);
  }
  display.fillRect(fruit.x * SNAKE_PIECE_SIZE, fruit.y * SNAKE_PIECE_SIZE, SNAKE_PIECE_SIZE, SNAKE_PIECE_SIZE, SSD1306_INVERSE);
}
// تابع برای نشان دادن امتیاز در بازی
void drawScore() {
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Score: ");
  display.print(snakeLength - STARTING_SNAKE_SIZE);
}
// تابع برای نمایش پیام یکی از دکمه ها را فشار دهید
void drawPressToStart() {
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 30);
  display.print("Press a button");
  display.setCursor(10, 40);
  display.print("to start!");
}
// تابع برای نمایش پیام گیم اوور
void drawGameover() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(20, 10);
  display.println("GAME OVER");
  display.setCursor(10, 20);
  display.println("Press A to restart");
  display.setCursor(10, 30);
  display.println("Press B to exit");
  display.display();
}

// آپدیت دکمه فشرده شده با این تابع در بازی
bool buttonPress() {
  char key = keypad.getKey();
  return key != NO_KEY; // Return true if any key is pressed
}
// آپدیت موقعیت مار در بازی با این تابع
void readDirection() {
  char key = keypad.getKey();
  if (key) {
    switch (key) {
      case '2': if (dir != DOWN) newDir = UP; break;    // Up
      case '6': if (dir != LEFT) newDir = RIGHT; break; // Right
      case '8': if (dir != UP) newDir = DOWN; break;    // Down
      case '4': if (dir != RIGHT) newDir = LEFT; break; // Left
    }
  }
}

// کنترل ماشین حساب
void showCalculator() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Calculator:");

  // نمایش ورودی و نتیجه
  display.setCursor(0, 20);
  display.print("Input: ");
  display.println(calcInput);
  display.setCursor(0, 40);
  display.print("Result: ");
  display.println(result, 4); // نمایش نتیجه با ۴ رقم اعشار

  display.display();

  // کنترل ماشین حساب
  char key = keypad.getKey();
  if (key) {

    if (key == 'B') { // بازگشت به منوی اصلی
      currentMenu = 0;
      calcInput = "";
      result = 0;
      lastOperator = '\0';
      return;
    } else if (key == 'A') { // عملگر جمع (+)
      if (calcInput.length() > 0) {
        calcInput += '+';
      }
    } else if (key == '*') { // عملگر ضرب (*)
      if (calcInput.length() > 0) {
        calcInput += '*';
      }
    } else if (key == '#') { // انجام محاسبه و نمایش نتیجه
      calculateResult();
    } else if (key == 'D') { // پاک کردن آخرین کاراکتر
      if (calcInput.length() > 0) {
        calcInput.remove(calcInput.length() - 1);
      }
    } else if (key == 'C') { // عملگر تفریق (-)
      if (calcInput.length() > 0) {
        calcInput += '-';
      }
    } else if (key >= '0' && key <= '9' || key == '.') { // اعداد و نقطه اعشار
      calcInput += key;
    }

    // به‌روزرسانی نمایشگر پس از هر تغییر
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Calculator:");
    display.setCursor(0, 20);
    display.print("Input: ");
    display.println(calcInput);
    display.setCursor(0, 40);
    display.print("Result: ");
    display.println(result, 4);
    display.display();
  }
}

// انجام محاسبات
void calculateResult() {
  double num1 = 0, num2 = 0;
  char op = '\0';
  int opIndex = -1;

  // پیدا کردن عملگر
  for (int i = 0; i < calcInput.length(); i++) {
    if (calcInput[i] == '+' || calcInput[i] == '-' || calcInput[i] == '*' || calcInput[i] == '/') {
      op = calcInput[i];
      opIndex = i;
      break;
    }
  }

  if (opIndex == -1) { // اگر عملگر وجود نداشته باشد
    result = calcInput.toDouble();
    return;
  }

  // جدا کردن اعداد
  num1 = calcInput.substring(0, opIndex).toDouble();
  num2 = calcInput.substring(opIndex + 1).toDouble();

  // انجام محاسبه
  switch (op) {
    case '+': result = num1 + num2; break;
    case '-': result = num1 - num2; break;
    case '*': result = num1 * num2; break;
  }

  // نمایش نتیجه
  calcInput = String(result, 4); // نمایش نتیجه با ۴ رقم اعشار
}
// تابع کرنومتر 
void showStopwatch() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Stopwatch:");

  // محاسبه زمان سپری شده
  if (stopwatchRunning) {
    stopwatchElapsedTime = millis() - stopwatchStartTime;
  }

  // نمایش زمان روی OLED
  display.setCursor(0, 20);
  display.print("Time: ");
  display.println(formatTime(stopwatchElapsedTime));
  display.display();

  // نمایش زمان روی 7-Segment
  unsigned long totalSeconds = stopwatchElapsedTime / 1000;
  unsigned long minutes = totalSeconds / 60;
  unsigned long seconds = totalSeconds % 60;
  tm.showNumberDecEx(minutes * 100 + seconds, 0b01000000, true); // نمایش به صورت MM:SS

  // کنترل کرنومتر با کی‌پد
  char key = keypad.getKey();
  if (key) {
    if (key == 'A') { // شروع یا ادامه کرنومتر
      stopwatchRunning = true;
      stopwatchStartTime = millis() - stopwatchElapsedTime;
    } else if (key == 'C') { // توقف کرنومتر
      stopwatchRunning = false;
    } else if (key == 'D') { // ریست کرنومتر
      stopwatchRunning = false;
      stopwatchElapsedTime = 0;
      tm.showNumberDecEx(0, 0b01000000, true); // ریست 7-Segment
    } else if (key == 'B') { // بازگشت به منو
      currentMenu = 0;
      return;
    }
  }
}
// تابع برای فرمت زمان به فرم MM:SS:MS 
String formatTime(unsigned long time) {
  unsigned long minutes = time / 60000;
  unsigned long seconds = (time / 1000) % 60;
  unsigned long milliseconds = time % 1000;

  char buffer[12];
  sprintf(buffer, "%02lu:%02lu:%03lu", minutes, seconds, milliseconds);
  return String(buffer);
}